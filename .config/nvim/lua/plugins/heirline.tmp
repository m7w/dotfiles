-- 	component_separators = { left = "", right = "" },
-- 	section_separators = { left = "", right = "" },
return {
	"rebelot/heirline.nvim",
	event = "VeryLazy",
	config = function()
		local conditions = require("heirline.conditions")
		local utils = require("heirline.utils")
		local function setup_colors()
			return require("catppuccin.palettes").get_palette()
		end

		vim.api.nvim_create_autocmd("ColorScheme", {
			group = vim.api.nvim_create_augroup("heirline", { clear = true }),
			callback = function()
				utils.on_colorscheme(setup_colors)
			end,
		})

		local mode_names = {
			n = "NORMAL",
			no = "O-PENDING",
			nov = "O-PENDING",
			noV = "O-PENDING",
			["no\22"] = "O-PENDING",
			niI = "NORMAL",
			niR = "NORMAL",
			niV = "NORMAL",
			nt = "NORMAL",
			ntT = "NORMAL",
			v = "VISUAL",
			vs = "VISUAL",
			V = "V-LINE",
			Vs = "V-LINE",
			["\22"] = "V-BLOCK",
			["\22s"] = "V-BLOCK",
			s = "SELECT",
			S = "S-LINE",
			["\19"] = "S-BLOCK",
			i = "INSERT",
			ic = "INSERT",
			ix = "INSERT",
			R = "REPLACE",
			Rc = "REPLACE",
			Rx = "REPLACE",
			Rv = "V-REPLACE",
			Rvc = "V-REPLACE",
			Rvx = "V-REPLACE",
			c = "COMMAND",
			cv = "EX",
			ce = "EX",
			r = "REPLACE",
			rm = "MORE",
			["r?"] = "CONFIRM",
			["!"] = "SHELL",
			t = "TERMINAL",
		}

		local mode_colors = {
			n = "blue",
			i = "green",
			c = "orange",
			R = "red",
			r = "red",
			v = "pink",
			V = "pink",
			["\22"] = "pink",
			s = "pink",
			S = "pink",
			["\19"] = "pink",
		}

		local Mode = {
			init = function(self)
				self.mode = vim.fn.mode(1)
			end,
			static = {},
			provider = function(self)
				return " " .. mode_names[self.mode] .. " "
			end,
			hl = function(self)
				local mode_one_letter = self.mode:sub(1, 1)
				return { fg = "base", bg = mode_colors[mode_one_letter], bold = true }
			end,
			update = { "ModeChanged" },
			{
				provider = function(_)
					return ""
				end,
				hl = function(self)
					local mode_one_letter = self.mode:sub(1, 1)
					return { fg = mode_colors[mode_one_letter], bg = "base" }
				end,
			},
		}

		local FileNameBlock = {
			-- let's first set up some attributes needed by this component and its children
			hl = function()
				return { bg = "black" }
			end,
			init = function(self)
				self.filename = vim.api.nvim_buf_get_name(0)
			end,
		}
		-- We can now define some children separately and add them later

		local FileIcon = {
			init = function(self)
				local filename = self.filename
				local extension = vim.fn.fnamemodify(filename, ":e")
				self.icon, self.icon_color =
					require("nvim-web-devicons").get_icon_color(filename, extension, { default = true })
			end,
			provider = function(self)
				return self.icon and (" " .. self.icon .. " ")
			end,
			hl = function(self)
				return { fg = self.icon_color }
			end,
		}

		local FileName = {
			provider = function(self)
				-- first, trim the pattern relative to the current directory. For other
				-- options, see :h filename-modifers
				local filename = vim.fn.fnamemodify(self.filename, ":.")
				if filename == "" then
					return "[No Name]"
				end
				-- now, if the filename would occupy more than 1/4th of the available
				-- space, we trim the file path to its initials
				-- See Flexible Components section below for dynamic truncation
				if not conditions.width_percent_below(#filename, 0.25) then
					filename = vim.fn.pathshorten(filename)
				end
				return filename
			end,
			hl = { fg = utils.get_highlight("Directory").fg },
		}

		local FileFlags = {
			{
				condition = function()
					return vim.bo.modified
				end,
				provider = "[+]",
				hl = { fg = "green" },
			},
			{
				condition = function()
					return not vim.bo.modifiable or vim.bo.readonly
				end,
				provider = "",
				hl = { fg = "orange" },
			},
		}

		-- Now, let's say that we want the filename color to change if the buffer is
		-- modified. Of course, we could do that directly using the FileName.hl field,
		-- but we'll see how easy it is to alter existing components using a "modifier"
		-- component

		local FileNameModifer = {
			hl = function()
				if vim.bo.modified then
					-- use `force` because we need to override the child's hl foreground
					return { fg = "cyan", bold = true, force = true }
				end
			end,
		}

		-- let's add the children to our FileNameBlock component
		FileNameBlock = utils.insert(
			FileNameBlock,
			FileIcon,
			utils.insert(FileNameModifer, FileName), -- a new table where FileName is a child of FileNameModifier
			FileFlags,
			{ provider = "%<" }, -- this means that the statusline is cut here when there's not enough space
			{ provider = " " }
		)

		local StatusLine = { Mode, FileNameBlock }

		require("heirline").setup({
			statusline = StatusLine,
			opts = {
				colors = setup_colors(),
			},
		})
	end,
}
